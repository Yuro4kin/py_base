# Списки: срезы и методы
# List comprehensions
# Создадим список, состоящий из квадратов чисел, определенных от 0 до N-1
# list = []                       # создали пустой список
# N = 10                          # задали N = 10
# for x in range(N):              # цикл - х меняется от 0 до N-1
#     list.append(x**2)           # добавили последний элемент списка x**2
# print(list)

# Формируем список x**2, сам x будет меняться в диапазоне N-1
# сначала указываем, что будем возводить некое значение x**2
# переменная x существует только внутри этого списка и пропадает после его создания
Nn = 10
list1 = [x**2 for x in range(Nn)]
print(list1)

# Создадим список из квадратов четных чисел
list2 = []                       # создали пустой список
Np = 10                          # задали N = 10
for x in range(Np):              # цикл - х меняется от 0 до N-1
    if x%2 == 0:                 # если x нацело делится на 2, значит x четное число
        list2.append(x**2)       # добавили последний элемент списка x**2
print(list2)

# После цикла можем записывать любые условия
# условие истина - формируется новый элемент списка
# вместо возведения в степень можно писать любой функционал
list3 = []                                      # создали пустой список
Nq = 10                                         # задали N = 10
list3 = [x**2 for x in range(Nq)if x%2 == 0]    # добавим условие: если остаток от деления 
print(list3)                                    # то будем добавлять в список x**2, добавляем квадраты только четных чисел

# вместо возведения в степень можно писать любой функционал
list4 = []                                      # создали пустой список
Nb = 10                                         # задали N = 10
list4 = [x**2 for x in range(Nb)if x%2 == 0]    # добавим условие: если остаток от деления 
print(list4)                                    # то будем добавлять в список x четных чисел   

# значение линейной функции
list5 = []                                      # создали пустой список
Nd = 10                                         # задали N = 10
list5 = [0.5*x+1 for x in range(Nd)]            # значения просто линейной функции 
print(list5)

# List comprehensions - со строками - генерирование, формирование новых списков
cities = ["Москва", "Тверь", "Рязань", "Ярославль", "Владимир"]     # список в виде строк
list6 = [city for city in cities if len(city) < 7]                  # формируем новый список, который будет состоять из тех названий городов, длины которых меньше 7
print(list6)

# Алгоритм - разбиваем целое положительное число по цифрам

# Есть число 432, нужно выделить каждую цифру этого числа ->
# вычисляем остаток от деления, деленное на 10, получаем последнюю цифру 2
# запоминаем 2 ->  отбрасываем число 2
# 432 % 10 = 2      
# ->  отбрасываем число 2
#
# выполняем целочисленное деление на 10, остаток 43
# 432 // 10 = 43
#
# остаток от деления 3
# 43 % 10 = 3
#- >  отбрасываем число 3
#
# выполняем целочисленное деление на 10, остаток 4
# 43 // 10 = 4
#
# остаток от деления 4
# 4 % 10 = 4
#- >  отбрасываем число 4
#
# выполняем целочисленное деление на 10, остаток 0
# 4 // 10 = 0

# Шаг 1: 432 % 10  = 2
#        432 // 10 = 43

# Шаг 2: 43 % 10   = 3
#        43 // 10  = 4

# Шаг 3: 4 % 10    = 4
#        4 // 10   = 0

# Алгоритм - разбиваем целое положительное число по цифрам

xx = int(input("Введите целое положительное число: "))
digs = []
while xx:
    digs.append(xx%10)   # Берем последнюю цифру числа
    xx = xx//10         # отбрасываем последнюю цифру числа
print(digs)

# Алгоритм - разбиваем целое положительное число по цифрам - сортировка по порядку

xxx = int(input("Введите целое положительное число: "))
digs = []
while xxx:
    #digs.append(xxx%10)   Берем последнюю цифру числа
    digs = [xxx%10] + digs
    xxx = xxx//10         # отбрасываем последнюю цифру числа
print(digs)

# Алгоритм - программа, меняющая порядок следования элементов в списке
# 1, 2, 3, 4, 5, 6, 7  - необходимо вывести в обратном порядке
# Программа - reverse

Nn = 10                                     # число элементов в этом списке
Aa = list(range(Nn))                        # формируем список из целых чисел от 0 до Nn-1(функция list с диапазоном от 0...N-1)
print(Aa)                                   # выводим список в консоль

for i in range(Nn//2):                      # цикл, переменная i определяет положение индексов
    Aa[i], Aa[Nn-i-1] = Aa[Nn-i-1], Aa[i]   # цикл, доходим до середины списка -> обмен данными между соответствующими элементами
print(Aa)

# Алгоритм - сортировка методом выбора по росту
# программа - сортировка методом выбора по росту

H = [2,2,-1,-5,55,34,0,10]                  # Список из чисел 
N = len(H)                                  # Определили длину этого списка
for z in range(N-1):                        # Цикл отвечает за положение индекса 1
    for j in range(z+1, N):                 # Цикл отвечает за положение индекса 3 - сравниваемого 
       if H[z] > H[j]:                      # Внутри вложеного цикла проверили, рост индекса 1 больше индекса 4 -> если это так, они меняются местами
          H[z],H[j] = H[j],H[z]
print(H)
