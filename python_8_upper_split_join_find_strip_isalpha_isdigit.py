# Python - строки являются объектами, объекты есть методы, то есть, функции,
# выполняющие определенные действия:
#             строка.имя_метода(аргументы)
string = "Hello World!"      # Строки неизменяемые объекты - строка не изменяется и ссылка на неё
str = string.upper()         # upper - имя метода, метод возвратил строку с заглавными буквами
str1 = "Hello Hello!".upper()
str2 = "GOODBYE!".lower()
# переменная string продолжает ссылаться на прежнюю строку - измененным является новый строковый объект

# Метод count 
# String.count(sub[, start[, end]]) 
# возвращает число повторений подстроки sub в строке String
# Aргументы:
# start – индекс, с которого начинается поиск;
# end – индекс, которым заканчивается поиск.

# Определим число повторений
msg = "abracadabra"
msg1 = msg.count("a")
msg2 = msg.count("ra", 4)         #  Начнем поиск с индекса 4
msg3 = msg.count("ra", 4, 10)     #  Начнем поиск с индекса 4, последний индекс не включается, до него доходит поиск
print(msg1, msg2, msg3)

# Метод find 
# String.find(sub[, start[, end]])
# возвращает индекс первого найденного вхождения подстроки sub
# в строке String
msg4 = msg.find("br")              # находит первое вхождение, дальше поиск не продолжается
msg5 = msg.find("br", 2)           # стартует с 2 индекса, ответ: индекс 8
msg6 = msg.find("brr")             # не находит индекс: -1
msg6 = msg.find("br", 2, 10)       # поиск индекса слева направо
msg7 = msg.rfind("br")             # если нам нужен поиск справа налево - right
print(msg4, msg5, msg6, msg7 )

# Метод index
# String.index(sub[, start[, end]])
# msg.index("abrr")
# возвращает индекс первого найденного вхождения подстроки sub
# в строке String
msg8 = msg.index("ra")
print(msg8)
# msg9 = msg.index("abrr")        # Метод возвратит ошибку    ValueError: substring not found

# String.replace(old, new, count=-1)
# замену подстрок old на строку new и возвращает измененную строку
msg10 = msg.replace("a", 'o')
msg11 = msg.replace("ab", "AB")     # замена малых на большие символы
msg12 = msg.replace("ab", "__")     # удаляем символы, или пробел "  "
msg13 = msg.replace("ab", "o", 2)   # указываем сколько замен нужно сделать 2
msg14 = msg.replace("a", "o", -1)   # кол-во изменений не ограничено
print(msg10, msg11, msg12, msg13, msg14)

# Метод isalpha
# String.isalpha()
# возвращает True, если строка состоит из букв, False - если есть символы другие
msg15 = msg.isalpha()               # True
print(msg15)

str3 = "GOOD BYE".isalpha()         # False
print(str3)

# Метод isdigit()
# String.isdigit()
# возвращает True, если строка состоит из цифр, False - если есть символы
str4 = "5.6".isdigit()         
print (str4)                  # False - есть хотябы один нецифровой символ

str5 = "56".isdigit()         
print (str5)                  # True

# Преобразование строки в целое число
# Пользователь вводит число, и мы перед преобразованием строки проверяем
# Содержатся ли в строке только цифры, если так сделали преобразование и вывели в консоль
# Иначе вывели - число введено неверно

# dig = input("Введите число: ")
# if(dig.isdigit()):
#    dig = int(dig)
#    print=(dig)
# else:
#    print("Число введено неверно")
    
# String.rjust(width[, fillchar = ‘ ‘])
# Возвращает новую строку с заданным числом символов width 
# При необходимости слева добавляет символы fillchar
# Есть строка аbc, мы указываем что эта строка должна содержать 5 символов
str6 = "abc"                # str6 остается без изменений
str7 = str6.rjust(5)        # символы добавляются слева - rjust
str8 = str6.rjust(5, "-")   # вместо пробела дефис
#str9 = str6.rjust(5, "-*")  # вместо пробела записать несколько символов нельзя
str10 = str6.rjust(2)
str11 = str6.ljust(10, "*") # добавляет символы слева - ljust
str12 = str6.ljust(7, "_")
print(str7, str8, str10, str11, str12)

# Метод split - возвращает коллекцию из строк
# String.split(sep=None, maxsplit=-1)
# возвращает коллекцию строк, на которые разбивается строка String
# разбивка осуществляется по указанному сепаратору sep
str13 = "Иванов Иван Иванович"
str14 = str13.split(" ")            # Коллекция из символов
print(str14)

digs = "1, 2,3, 4,5,6"
dig1 = digs.replace(" ", "")        # 1. Удалили все пробелы из нашей строки
dig2 = dig1.split(",")              # 2. Получили коллекцию из чисел
print(digs, dig1, dig2)

digg = "25, 24,34, 44,55,66"
dig3 = digg.replace(" ", "").split(",")   # 1. Удалили все пробелы из нашей строки # 2. Получили коллекцию из чисел
print(digg, dig3)

# Метод join - возвращает строку из объединенных элементов списка
# между которыми будет разделитель String
# String.join(список)
# Нужно снова вернуть из коллекции в строку и поставить запятую
dig4 = ", ".join(dig3)
print(dig4)

fio = "Иванов Иван Иванович"        # Преобразуем строку, вместо пробелов - запятые
fio2 = ", ".join(fio.split())       # split() - без аргументов - это разбивка по пробелам
print(fio, fio2)                         # ", ".join - объединяем список без разделителя
                                    
# String.strip()
# Удаляет пробелы и переносы строк в начале и конце строки
str15 = "   hello world         \n"      # для приведения строковых данных к естественному виду 
str16 = str15.strip()                    # lstrip - слева, rstrip - справа
print(str16)


# String.upper() - Возвращает строку с заглавными буквами
# String.lower() - Возвращает строку с малыми буквами
# String.count(sub[, start[, end]]) - Определяет число вхождений подстроки в строке
# String.find(sub[, start[, end]]) - Возвращает индекс первого найденного вхождения
# String.rfind(sub[, start[, end]]) - Возвращает индекс первого найденного вхождения при поиске справа
# String.index(sub[, start[, end]]) - Возвращает индекс первого найденного вхождения
# String.replace(old, new, count=-1) - Заменяет подстроку old на new
# String.isalpha() - Определяет: состоит ли строка целиком из буквенных символов
# String.isdigit() - Определяет: состоит ли строка целиком из цифр
# String.rjust(width[, fillchar = ‘ ‘]) - Расширяет строку, добавляя символы слева
# String.ljust(width[, fillchar = ‘ ‘]) - Расширяет строку, добавляя символы справа
# String.split(sep=None, maxsplit=-1) - Разбивает строку на подстроки
# String.join(список) -Объединяет коллекцию в строку
# String.strip() - Удаляет пробелы и переносы строк справа и слева
# String.rstrip() - Удаляет пробелы и переносы строк справа
# String.ltrip() - Удаляет пробелы и переносы строк слева





## c_o_n_s_o_l_e ##
#  5 1 0
#  1 8 8 8
#  2
#  obrocodobro ABracadABra __racad__ra oracadora obrocodobro
#  True
#  False
#  False
#  True
#    abc --abc abc abc******* abc____
#  ['Иванов', 'Иван', 'Иванович']
#  1, 2,3, 4,5,6 1,2,3,4,5,6 ['1', '2', '3', '4', '5', '6']
#  25, 24,34, 44,55,66 ['25', '24', '34', '44', '55', '66']
#  25, 24, 34, 44, 55, 66
#  Иванов Иван Иванович Иванов, Иван, Иванович
#  hello world

