# Обработка исключений
# Возникновение исключительных ситуаций, или попросту – исключений
# a=[]; a.pop()                   # IndexError: pop from empty list
# 5 / 0                           # ZeroDivisionError: division by zero
# int("12abc")                    # ValueError: invalid literal for int() with base 10: '12abc'
# "2" + 5                         # TypeError: can only concatenate str (not "int") to str

# Программа для вычисления деления двух целых чисел - exception - исключение деление на 0
x = input("x: ")                  # Вводим два числа
y = input("y: ")                  # Вводим два числа

try:                              # Критический код программы помещается в блок try
    x = int(x)                    # Преобразовываем х к целому числу
    y = int(y)                    # Преобразовываем y к целому числу
 
    res = x/y                     # выполняем деление

except ZeroDivisionError:         # после блока указываем исключение которое собираемся отлавливать ZeroDivisionError:
    res = "деление на ноль"       # если исключение произойдет, переменной res присвоим 

print("Если делим на 0 - error - программа не завершается аваорийно: ", res) # ZeroDivisionError: division by zero


# Сначала идет выполнение программы внутри блока try.
# Если все проходит в штатном режиме, то выполнение доходит до блока except и он пропускается,
# не выполняется. И далее уже вызывается функция print и печатается полученный результат.
# Если же в процессе выполнения программы блока try возникает какое-либо исключение
# (любое), то выполнение программы прерывается и управление передается блоку except
# с соответствующим именем исключения. Если нужное имя в блоке except отсутствует,
# то исключение переходит на более высокий уровень (в данном случае к среде выполнения интерпритатора Python).
# И в случае отсутствия обработчика исключение считается необработанным (unhandled exception) и программа завершается аварийно.

# Программа для вычисления деления двух целых чисел - exception - исключение деление на 2a
x1 = input("x1: ")                  # Вводим два числа
y1 = input("y1: ")                  # Вводим два числа

try:                                # Критический код программы помещается в блок try
    x1 = int(x1)                    # Преобразовываем х к целому числу
    y1 = int(y1)                    # Преобразовываем y к целому числу
 
    res1 = x1/y1                     # выполняем деление

except (ZeroDivisionError, ValueError):                    # после блока указываем два исключения которые собираемся отлавливать ZeroDivisionError, ValueError 
    res1 = "деление на ноль или нечисловое значение"       # если исключение произойдет, переменной res присвоим 

print("Если делим на 0 или нечисловое значение - error: ", res1) # ZeroDivisionError: division by zero


# Для раздельной обработки запишем два except, друг за другом
x2 = input("x2: ")                  # Вводим два числа
y2 = input("y2: ")                  # Вводим два числа

try:                                # Критический код программы помещается в блок try
    x2 = int(x2)                    # Преобразовываем х к целому числу
    y2 = int(y2)                    # Преобразовываем y к целому числу
 
    res2 = x2/y2                     # выполняем деление

except ZeroDivisionError:                                  # после блока указываем два исключения которые собираемся отлавливать ZeroDivisionError, ValueError 
    res2 = "деление на ноль "                              # если исключение произойдет, переменной res присвоим 
except ValueError:                                         # после блока указываем два исключения которые собираемся отлавливать ZeroDivisionError, ValueError 
    res2 = "одно из введенных значений не число"           # если исключение произойдет, переменной res присвоим - неверное преобразование введенных значений
                                                           # исключения работают независимо

print("Если делим на 0 или нечисловое значение - error: ", res2) 

# Если мы хотим при возникновении ошибок указывать служебное сообщение,
# записанное в соответствующих исключениях, то это делается так - as - имя переменной z
x3 = input("x3: ")                  # Вводим два числа
y3 = input("y3: ")                  # Вводим два числа

try:                                # Критический код программы помещается в блок try
    x3 = int(x3)                    # Преобразовываем х к целому числу
    y3 = int(y3)                    # Преобразовываем y к целому числу
 
    res3 = x3/y3                    # выполняем деление

except ZeroDivisionError as z:      # после имени исключения ставим ключевое слово as и переменную, которая будет ссылаться на другой класс в котором храниться сообщение ошибки 
    res3 = z                        # если исключение произойдет, переменной res присвоим - конкретное сообщение ошибки
except ValueError as v:             # после имени исключения ставим ключевое слово as и переменную, которая будет ссылаться на другой класс в котором храниться сообщение ошибки  
    res3 = v                        # если исключение произойдет, переменной res присвоим - конкретное сообщение ошибки
                                    # исключения работают независимо

print("Если делим на 0 или нечисловое значение - error: ", res3)


# Блок try поддерживает необязательный блок else,
# который выполняется при штатном выполнении кода внутри блока try,
# то есть, когда не произошло никаких ошибок
# Блок finally
x4 = input("x4: ")                  # Вводим два числа
y4 = input("y4: ")                  # Вводим два числа

try:                                # Критический код программы помещается в блок try
    x4 = int(x4)                    # Преобразовываем х к целому числу
    y4 = int(y4)                    # Преобразовываем y к целому числу
 
    res4 = x4/y4                    # выполняем деление

except ZeroDivisionError as p:      # после имени исключения ставим ключевое слово as и переменную, которая будет ссылаться на другой класс в котором храниться сообщение ошибки 
    res4 = p                        # если исключение произойдет, переменной res присвоим - конкретное сообщение ошибки
except ValueError as q:             # после имени исключения ставим ключевое слово as и переменную, которая будет ссылаться на другой класс в котором храниться сообщение ошибки  
    res4 = q                        # если исключение произойдет, переменной res присвоим - конкретное сообщение ошибки
                                    # исключения работают независимо

else:                               # Если в блоке try е произоло никаких исключений 
    print("Исключений не произошло")# выполнится print
                                    # выполняется только тогда когда в блоке try не происходит ошибок 

finally:                            # выполняется всегда после блока try, вне зависимости произошла ошибка или нет
    print("Блок finally выполняется всегда")
    
print("Если делим целочисленные числовые значения - else: ", res4)

# Есть ситуации когда finally выполняется, а операторы после try не выполняются
# Блок finally выполняется всегда - есть исключения или нет исключений
# Блок finally выполняется всегда - обрабатываемое или необрабатываемое исключение


def getValues():
    x5 = input("x5: ")
    y5 = input("y5: ")
    try:
        x5 = int(x5)
        y5 = int(y5)
        return x5,y5                # ф-ция завершается когда встречается return, блок finally все равно будет выполнен
    except ValueError as v1:
        print(v1)
        return 0,0                  # ф-ция завершается когда встречается return, блок finally все равно будет выполнен
    finally:
        print("finally выполняется до return")
 
x5,y5 = getValues()
print(x5, y5)
print("Если водим нечисловое значение - возвращаются значения 0 0: ",(x5, y5))


# Можно прописывать в блоке try - except без указания имя класса исключения
x6 = input("x6: ")
y6 = input("y6: ")
try:
    x6 = int(x6)
    y6 = int(y6)
 
    res5 = x6 / y6
except:
    print("Произошло исключение")  # Выполняется когда происходит любое исключение -
                                   # данное исключение не обрабатывается а переходит на уровень выше
                                   # Если исключений нет - except не выполняется
else:
    print("Исключений не произошло")
finally:
    print("Блок finally выполняется всегда")
 
print("В блоке try - except без указания имя класса исключения: " ,res6)

