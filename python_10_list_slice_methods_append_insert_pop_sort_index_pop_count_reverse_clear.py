# списки - срезы и методы: 
# выделим элементы, начиная с индекса start и заканчивая,
# но не включая индекс end
# список[start:end] - начальный и конечный индекс

lst = ["Москва", "Санкт-Петербург", "Тверь", "Казань"]
lst1 = lst[1:3]         # 1-й элемент включается, 2-й включается, 3-й не включается
                        # lst список остается без изменения
lst2 = lst[-2:-1]       # Отсчет идет с конца
lst3 = lst[0:-1]        # Выделили все элементы нашего списка, кроме последнего
lst4 = lst[1:9999]      # ошибки не будет
lst5 = lst[1:]          # возьмем все элементы до конца
lst6 = lst[:3]          # исключили последний элемент
lst7 = lst[:]           # возвращает список целиком - создается КОПИЯ списка 

print(id(lst7), id(lst))# - создается КОПИЯ списка 

# Создаем копию списка list
c = list(lst)
print(id(c), id(lst))

# При замене в списке , исходный lst остается без изменений
# Совершенно получаем два разных списка
c [1] = 1
print(c)

# Срезы - шаг следования
lst8 = lst[::2]

# Срезы - начальное значение - конечное значение - шаг следования
lst9 = lst[1:4:2]

# Срезы - не указываем начальное значение - конечное значение - шаг следования
# Взяли первый элемент и дальше через три взяли последний
lst10 = lst[:4:3]

# Срезы - указываем начальное значение - не указываем конечное значение - шаг следования
lst11 = lst[1::2]

# Срезы - отрицательный индекс - перебор элементов будет в обратном порядке
lst12 = lst[::-1]

# Список - это изменяемый объект, срезам присваиваем новое значение
lst13 = lst[1:3] = "Львов", "Винница"
# СБОРЩИК МУСОРА УДАЛЯЕТ ПРЕДЫДУЩИЕ ЭЛЕМЕНТЫ

# Срезы - вместо трех элементов 1,2,3 - записываются два элемента, сократили длину списка на 1
lst14 = lst[0:3] = 'Ужгород', 'Луцк'

# Список - удаление элемента из списка
del lst[1]

# Метод .append()
# Методы в списках - добавим в конец списка новое значение
# Вызываем список для которого _вызывается метод_.имя метода(значение добавляемого эл-та)
a = [1, -54, 3, 23, 43, -45, 0]
a.append(100)
lstB = a.append(50) # не надо писать НЕЛЬЗЯ - a присвоится, то что возвратит append
# lstB - NONE - не имеет ни типа ни значения - потеряем весь наш список

# Списки - изменяемый тип данных - .append()
# Строки - .upper() - возвращает новую измененную строку

# Списки - добавление строк - .append()
# Списки - добавление булевого значение - .append()
# Списки - добавление списка - .append()
a.append("hello")
a.append(True)
a.append([1,2,3])

# Метод .append() - добавляет одно значение

# Метод .insert(3, 1000 ) - добавляет по индексу
a.insert(3, -1000)

# Метод .remove(True) - удаляет элемент по значению - 1 и True - одно и тоже
# Метод .remove(True) - удаляет первый найденный элемент 1, вызываем повторно удаляет True
a.remove(True)
a.remove(True)
a.remove(-1000)
a.remove(False)         # Удалил 0
# a.remove("buy")       # ValueError: list.remove(x): x not in list

# Метод .pop() - удаляет элемент по значению - возвращает удаленный элемент по значению 
# .pop() - без аргумента удаляет последний элемент в списке
# .pop() - метод возвратит последний элемент, метод возвратит последнее значение этого элемента
a.pop()
# Метод .pop() - можем сохранять удаленный элемент, и при необходимости что-то с ним делать
end = a.pop()
# Метод .pop() - удаление элемента по индексу
end3 = a.pop(3)

# Метод .clear() - удаление всего списка

# Метод .copy() - создает копию нашего списка
b = a.copy()
b[1] = 100              #  Переменные a и b ссылаются на разные списки

# Метод .count() - находит кол-во элементов с указанным значением
b.append(3)
b.append(3)
countB = b.count(3)     # Находит кол-во элементов с указанным значением

# Метод .index() - находит  индекс 1-го элемента с определенным значением
index_B = b.index(3)

# Метод .index() - start, находит  индекс элемента с какого будем искать с определенным значением
index_b = b.index(23, 2)

# Метод .index() - находит  индекс элемента до которого будем искать с определенным значением 
index_bb = b.index(3, 1, 10)

# Срез - проверка существует ли элемент в данном срезе
cheсkListB = 23 in b[1:7]
print(cheсkListB)

# Метод .reverse() - меняет порядок записи элементов
d = [1, -54, 23, 23, 43, -45, 0]
print(d)
# Метод .sort() - сортировка списка по возрастанию
d.sort()
print(d)

# Метод .sort(reverse=True) - сортировка списка по убыванию
d.sort(reverse=True)
print(d)

# Метод .sort(reverse=True) - сортировка списка со строками
lst15 = ["Москва", "Санкт-Петербург", "Тверь", "Казань"]
lst15.sort()                  #  Лексикографическая сортировка
print(lst15)



## c_o_n_s_o_l_e ##


#  2448631222144 2448631348672
#  2448590594496 2448631348672
#  ['Москва', 1, 'Тверь', 'Казань']
#  True
#  [1, -54, 23, 23, 43, -45, 0]
#  [-54, -45, 0, 1, 23, 23, 43]
#  [43, 23, 23, 1, 0, -45, -54]
#  ['Казань', 'Москва', 'Санкт-Петербург', 'Тверь']
