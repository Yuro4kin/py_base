# формирование строк на основе набора различных переменных и даже функций

# Создадим строки и соединим их между собой
age = 18
name = "Федор"
print("Меня зовут " + name + ", мне " + str(age) + " и я люблю язык Python.")
# имя Федор и взраст взяты из соответствующих переменных, + соединяет строки между собой
# Функция str преобразовывает число в строку - str(age), соединять между собой можем только строки 

# метод строки - str.format(*args)
# "Меня зовут {0}, мне {1} и я люблю язык Python.".format(name, age)
# Записывается строка, у нее вызывается метод format,  нем указываются переменные на основе которых будет формироваться эта строчка
# {0}, {1} - соответствующие индексы переменных name, age
# метод строки - str.format(*args) - возвращает новую строку
age1 = 20
name1 = "Nikita"
print("Меня зовут {0}, мне {1} и я люблю язык Python.".format(name1, age1))

# Переменная msg будет ссылаться на строку, и уже дальше с строкой что-нибудь можно делать
msg = print("Меня зовут {0}, мне {1} и я люблю язык Python.".format(name1, age1))

# Используем именованные параметры - перед каждым именованным параметром записывается ключ
msg1 = print("Меня зовут {fio}, мне {old} и я люблю язык Python.".format(fio=name1, old=age1))

# Используем именованные параметры - можно записывать в произвольном порядке - ключи (аргументы)
age2 = 19
name2 = "Vlad"
msg2 = print("Меня зовут {fio}, мне {old} и я люблю язык Python.".format(old=age2, fio=name2))

# Если записать вместо ключа переменную - ошибка KeyError
# msg2 = print("Меня зовут {name2}, мне {old} и я люблю язык Python.".format(old=age2, fio=name2))

# Начиная с Python 3.6 оявились F-строки
# более глубокого изучения можно обратиться к стандарту PEP498 документации Python
# https://www.python.org/dev/peps/pep-0498
# PEP 498 -- Literal String Interpolation
age3 = 17
name3 = "Egor"
msg3 = print(f"Меня зовут {name3}, мне {age3} и я люблю язык Python.")
    # ставим f перед строковым литералом,
    # name3, age3 - имя переменной
    # не надо создавать дополнительные ключи, а сразу прописываем имя переменной
msg4 = print(f"Меня зовут {name3.upper()}, мне {age3*2} и я люблю язык Python.")
msg5 = print(f"Меня зовут {name3.upper()}, мне {14*2} и я люблю язык Python.")
    # выполнение любой конструкции языка Python - например, арифметические операции
msg6 = print(f"Меня зовут {len(name3)}, мне {age3} и я люблю язык Python.")
    # вызов функции - длина строки

    # Написание собственной функции - возвращает True

def f(n):                       # возвращает True если n четная, False если n - нечетная
    return n%2 == 0

age4 = 21
name4 = "Vladimir"
msg7 = print(f"""Меня зовут {(name4)}, мне {age4} и проверка возраста на четность дает значение {f(age4)} """)
                                                               #    вызываем функцию f от значения age4
                                                               # т.к. age4 четная будет подставлено значение True
                                                               # которое возвратит ф-ция f.  return n%2 == 0 

# Помимио переменных в f строках можно использовать любые типы данных
# списки, кортежи, словари

# Используем словарь, который будет выводить для человека мужского рода Уважаемый, женск. рода - Уважаемая
g = {"m": "Уважаемый", "w": "Уважаемая"}            # задали словарь
                                                    # муж. род - Уважаемый, жен.род - Уважаемая 

ps = [("Иван Федорович", 18, "m"),                  # Список наших людей: как зовут, возраст, пол
      ("Сергей Владимирович", 32, "m"),
      ("Дарья Ивановна", 22, "w"),
      ("Ксения Петровна", 25, "w")]
 
for p in ps:                                        # с помощью цикла for перебираем список ps
                                                    # берем сначала первый элемент, потом второй и т.д. до конца
                                                    # на основе этих элементов формируем сообщение
                                                    # используем словарь g, чтобы понять как обратиться к человеку, в зависимости от 3-го аргумента "m" - Уважаемый либо "w" - Уважаемая
                                                    # в квадратных скобках указываем [ p[2] ] последний элемент p от 2,
                                                    # далее [ p[0] ], далее p от 0 выводим его имя
                                                    # далее поздравляем вас с {p[1]}-летием

    msg8 = f"""{g[ p[2] ]} {p[0]}! Поздравляем Вас
с {p[1]}-летием! Желаем выучить язык Python"""
 
    print( msg8, end="\n\n" )

