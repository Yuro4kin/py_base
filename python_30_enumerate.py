# enum
# в Python для последовательного перебора элементов любого итерируемого объекта используется оператор цикла for

# Есть упорядоченный список, с помощью цикла for переберем элементы упорядоченного списка
# Объект а в цикле for воспринимает как объект итератор --> берет его как итератор
# и затем переходит к следующему элементу этого объекта с помощью ф-ции next
# Ф-ция next возвращает текущий элемент, и затем осуществляет переход к следующему элементу и делает
# до тех пор пока не дойдем до последнего элемента. Ф-ция next возвращает текущий элемент, и ссылку на этот элемент
# мы полностью запоминаем с помощью переменной x. х - это ссылка на текущий элемент этого списка
# Если в цикле for захотим изменить какой-либо из этих элементов - ничего не получится, т.к. изменим ссылку x
# сам массив останется без изменений
a = [1, 4, 2, -5, 0, 11]
for x in a:
    print("Элементы упорядоченного списка", x)
    x = 1  # сделаем все элементы = 1 - Элементы упорядоченного измененного списка не изменились, т.к. мы просто
           # поменяли ссылку x, список a не изменяется

# выведем список чтоб убедиться изменились или нет элементы списка
print("Элементы упорядоченного неизмененного списка", a)

# Если внутри цикла for требуется не просто перебирать элементы но еще менять их,
# то необходимо обращаться к элементу по его индексу []

i = 0
for x in a:                 #  Перебираем список a
    if x % 2 == 0:          #  Проверяем, если текущий элемент четный
        a[i] += 1           #  прибавляем 1 к этому элементу, т.е. единицу добавим в списке a к элементам 4, 2, 0
      #    x += 1           #  работать не будет и элементы остануться без изменений
    i += 1                  #  т.е. единицу добавим в списке a к элементам 4, 2, 0

print("Измененные элементы в списке а, обратились по индексу []: ", a)

# Чтобы внутри цикла for не только получать ссылку на текущие элементы, но и знать порядковый индекс []
# используется функция enumerate
# Перепишем программу с использованием ф-ции enum

                            #  Ф-ция будет возвращать не просто элемент x, а кортеж из двух значений (i - индекс, x - значение)
for i, x in enumerate(a):   #  Обратимся не просто к списку a, вызовем ф-цию enum, в качестве первого параметра укажем список a
    if x % 2 == 0:          #  Проверяем, если текущий элемент четный
        a[i] += 1           #  прибавляем 1 к этому элементу, т.е. единицу добавим в списке a к элементам 4, 2, 0

print("Измененные элементы в списке а с использованием ф-ции enumerate(), обратились по индексу []: ", a)
# с помощью ф-ции enumerate гораздо проще записали программу в которой можем обращаться не только к элементу
# но и знать его порядковый индекс - упрощает работу с любыми итерируемыми объектами

# Перепишем программу с использованием ф-ции enum

                            #  Переберем список a с помощью ф-ции enumerate и получим элемент e (кортеж из двух значений) (i - индекс, x - значение)
for e in enumerate(a):      #  Обратимся не просто к списку a, вызовем ф-цию enum, в качестве первого параметра укажем список a
    print("Получаем кортеж - порядковый индекс, значение элемента, используем enumerate(), на каждой итерации цикла for обладаем расширенной ин-цией: ", e)

# Синтаксис ф-ции enumerate: enumerate(sequence, start=0)
# Здесь:                               sequence – это любой итерируемый объект;
#                                                start – начальное значение индекса.
# Например, если вторым параметром указать 1, то индекс будет отсчитываться уже от 1.