# enum
# в Python для последовательного перебора элементов любого итерируемого объекта используется оператор цикла for

# Есть упорядоченный список, с помощью цикла for переберем элементы упорядоченного списка
# Объект а в цикле for воспринимает как объект итератор --> берет его как итератор
# и затем переходит к следующему элементу этого объекта с помощью ф-ции next
# Ф-ция next возвращает текущий элемент, и затем осуществляет переход к следующему элементу и делает
# до тех пор пока не дойдем до последнего элемента. Ф-ция next возвращает текущий элемент, и ссылку на этот элемент
# мы полностью запоминаем с помощью переменной x. х - это ссылка на текущий элемент этого списка
# Если в цикле for захотим изменить какой-либо из этих элементов - ничего не получится, т.к. изменим ссылку x
# сам массив останется без изменений
#
#  a --> 1 , 4, 2 , -5 , 0 , 11
#
#  for x in a:     |   g = iter(a)      - объект итератор
#     print(x)     |   next(g)          - получение текущего эл-та и переход к следующему
a = [1, 4, 2, -5, 0, 11]
for x in a:
    print("Элементы упорядоченного списка", x)
    x = 1  # сделаем все элементы = 1 - Элементы упорядоченного измененного списка не изменились, т.к. мы просто
           # поменяли ссылку x, список a не изменяется

# выведем список чтоб убедиться изменились или нет элементы списка
print("Элементы упорядоченного неизмененного списка", a)

# Если внутри цикла for требуется не просто перебирать элементы но еще менять их,
# то необходимо обращаться к элементу по его индексу []

i = 0
for x in a:                 #  Перебираем список a
    if x % 2 == 0:          #  Проверяем, если текущий элемент четный
        a[i] += 1           #  прибавляем 1 к этому элементу, т.е. единицу добавим в списке a к элементам 4, 2, 0
      #    x += 1           #  работать не будет и элементы остануться без изменений
    i += 1                  #  т.е. единицу добавим в списке a к элементам 4, 2, 0

print("Измененные элементы в списке а, обратились по индексу []: ", a)

# Чтобы внутри цикла for не только получать ссылку на текущие элементы, но и знать порядковый индекс []
# используется функция enumerate
# Перепишем программу с использованием ф-ции enum

                            #  Ф-ция будет возвращать не просто элемент x, а кортеж из двух значений (i - индекс, x - значение)
for i, x in enumerate(a):   #  Обратимся не просто к списку a, вызовем ф-цию enum, в качестве первого параметра укажем список a
    if x % 2 == 0:          #  Проверяем, если текущий элемент четный
        a[i] += 1           #  прибавляем 1 к этому элементу, т.е. единицу добавим в списке a к элементам 4, 2, 0

print("Измененные элементы в списке а с использованием ф-ции enumerate(), обратились по индексу []: ", a)
# с помощью ф-ции enumerate гораздо проще записали программу в которой можем обращаться не только к элементу
# но и знать его порядковый индекс - упрощает работу с любыми итерируемыми объектами

# Перепишем программу с использованием ф-ции enum

                            #  Переберем список a с помощью ф-ции enumerate и получим элемент e (кортеж из двух значений) (i - индекс, x - значение)
for e in enumerate(a):      #  Обратимся не просто к списку a, вызовем ф-цию enum, в качестве первого параметра укажем список a
    print("Получаем кортеж - порядковый индекс, значение элемента, используем enumerate(), на каждой итерации цикла for обладаем расширенной ин-цией: ", e)

# Синтаксис ф-ции enumerate: enumerate(sequence, start=0)
# Здесь:  первый параметр              sequence – это любой итерируемый объект;
#         второй параметр                        start – начальное значение индекса, по умолчанию 0, можем указать любой другой
# Например, если вторым параметром указать 1, то индекс будет отсчитываться уже от 1

# Синтаксис ф-ции enumerate: enumerate(sequence, start=0) - изменим начальное значение индекса
for d in enumerate(a, 1):   #  Обратимся не просто к списку a, вызовем ф-цию enum
                            #  в качестве первого параметра укажем список a, второго параметра 1
    print("Получаем кортеж - изменим началььное значение индекса, используем синтаксис - enumerate(sequence, start=0): ", d)
                            # - чаще используется индекс 0 - начальное значение индекса

# что возвращает функция enumerate?
# "НА КАЖДОЙ ИТЕРАЦИИ" мы получаем кортеж из двух значений – индекса и самого элемента
g = enumerate(a)            #  g - это уже итерируемый объект, который можно перебирать c помощью ф-ции next()
print(g)                    #  g - <enumerate object at 0x00000270D93F1900>
print( "с помощью ф-ции next получим текущее значение которое возвратит итератор и увидим кортеж:",next(g) )            #  с помощью ф-ции next получим текущее значение которое возвратит итератор и увидим кортеж
                            #  кортеж получаем перебирая итератор, цикл for перебирает итератор таким образом
                            #  как бы вызывает ф-цию next и на выходе получаем кортеж из двух значений
                            #  ф-ция next() - это объект итератор который можно перебирать

# Запишем ф-цию enumerate в упрощенном виде
def enumerate(sequence, start=0):   # Определили два параметра, согласно синтаксиса ф-ции enumerate: enumerate(sequence, start=0)
    n = start                       # любой итерируемый объект - начальный индекс start
    for elem in sequence:           # цикл for, перебираем список sequence, далее
        yield n, elem               # оператор yield на каждой итерации возвращает индекс n, т.е. кортеж из двух значений индекса и самого эл-та
        n += 1                      # затем n увеличивается на 1
                                    # оператор yield формирует итератор

for f in enumerate(a):      #  Обратимся не просто к списку a, вызовем ф-цию enum
    print(f)                #  также выводятся кортежи


# Применение ф-ции enumerate() к строкам "hello", строка это тоже итерируемый объект
# Переберем каждый символ - получим порядковый индекс и символ
for i in enumerate("hello"):
    print("""Применение ф-ции enumerate() к строкам "hello":""", i)

# Применение ф-ции enumerate() к коллекции слов "hello", коллекция это тоже итерируемый объект
# Переберем коллекцию по словам
for i in enumerate(["hello", "world"]):
    print("""Применение ф-ции enumerate() к коллекциям ["hello", "world"]:""", i)

# Применение ф-ции enumerate() к словарям {1: 'a', 2: 'b', 3: 'c'}, словарь это тоже итерируемый объект
# Переберем словарь, на выходе получим порядковый индекс и ключ, значений у нас здесь нет
c = {1: 'a', 2: 'b', 3: 'c'}
for i in enumerate(c):
    print("Применение ф-ции enumerate() к словарям {1: 'a', 2: 'b', 3: 'c'} - результат индекс и ключ:", i)

# Применение ф-ции enumerate() к множествам {1,2,3,4,5,4,4,4}, множества это тоже итерируемый объект
# Переберем множества, на выходе получим порядковый индекс и значения - порядок следования элементов может отличаться
s = {1,2,3,4,5,4,4,4}
for i in enumerate(s):
    print("Применение ф-ции enumerate() к множествам {1,2,3,4,5,4,4,4} - результат индекс и значение:", i)