# Кортеж – это упорядоченная неизменяемая коллекция произвольных данных.
a = 1, 2
b = (1, 2, 3, 4, 5)
c = 1,
cc = (1,)

# переменные через запятую - присвоим значения из кортежа
x,y = (1,2)
# d,e = (1,2,3)       # error

# len(a) - определения длины кортежа (числа его элементов)
lenB = len(b)

# доступ к элементам кортежа - по индексу
searchInd = b[3]
b[-1]

# срезы 
b[1:2]          # последний индекс среза не включается
b[0:1]          # возьмем все кроме последнего элемента
b[:3]           # указать начальное значение, возьмем первые три элемента
b[:]            # весь кортеж

d = b[:]        # переменная d ссылается на тот же кортеж, это не копирование
tupID = print=(id(d), id(b))

# Кортеж - это неизменяемый тип
#a[1] = 100      # error - не можем определенному значению присвоить другое значение
                 # использовать кортеж, «запретить» программисту менять значения элементов списка

# Ключ у словарей
e = {}                  # словарь e
e[a] = "кортеж"
# {(1, 2): 'кортеж'}    # получим в итоге словарь e 

# Списки это изменяемый элемент, а ключами словарей могут быть неизменяемые элементы
# Поэтому кортежи хорошо подходят
# Кортеж занимает меньше памяти, чем такой же список
lst=[1,2,3]
tup=(1,2,3)
lstByte = lst.__sizeof__()          # размер любого объекта в памяти __sizeof__()
tupByte = tup.__sizeof__()

# операции с кортежами выполняются быстрее, чем со списками,
# например, перебор элементов или доступ к отдельному элементу.
# - если мы работаем с неизменяемым упорядоченным списком,
# то предпочтительнее использовать кортеж.

# Создать пустой кортеж
f = ()
g = tuple()
typeTuple = print=(type(f), type(g))        # вывести тип переменных
                                            # (<class 'tuple'>, <class 'tuple'>)

# Добавлять новые элементы в кортеж
h = ()
h = h+(1,)
h = (2,3)+h                                 # добавить в начало к существующему кортежу
h += (("a", "hello"),)                      # добавить вложенный кортеж
i = (0,)*10                                 # кортеж состоит из 0, продублировать 10 раз
ii = ('hello', 'world')*5                   # дубли из слов

# функции tuple , list ( с списка в кортеж, с кортежа в список)
# функция tuple - создавать кортежи на основе любых упорядоченных списков
j = tuple([1,2,3])                          # передали в качестве аргумента список
jj = tuple("Привет мир")                    # передали строку, строка это КОЛЛЕКЦИЯ из символов

# обратная операция, из кортежа получим список - функция list
k = (1,2,3)
lstK = list(k)

# Виды данных для хранения кортежа
l = (True, [1,2,3], "hello", 5, {"house": "дом"})
# бул.перем.список, строка, число, словарь

# список – это изменяемый тип, следовательно,
# его значение даже в кортеже мы можем спокойно менять
# обратимся к элементу по индексу 1
l[1]
# получили доступ по индексу 1 -[1,2,3] - это список, можем менять 
l[1].append(5)

# неизменность кортежа к структуре и к ссылкам, которые ссылаются на соответствующие объекты
# значение ссылок менять не можем, можем менять объект, если он является изменяемым
# ссылка на объект неизменная

# не можем удалять отдельные элементы из кортежа
# del l[1]
# удалить весь кортеж мы можем
# del l

# Метод .count("abc") - найти элемент по его значению возвращает индекс первого найденного
l.count("abc")          # 0
l.count("hello")        # 1
l.count(5)              # 1
l.count('5')            # 0  - в списках не ищет [1,2,3]

# Метод .index("abc") - найти элемент по его значению - возвращает индекс элемента
l.index([1,2,3,5])      # 1 - index элемента
l.index(5)              # 3 - index элемента
#l.index(0)             # error - нет элемента
l.index(5, 3)           # второй аргумент говорит, с какого индекса иы буем начинать искать
l.index(5, 3, 4)        # с какого индекса и по который будем искать
