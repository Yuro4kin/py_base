# Механизм для сортировки элементов упорядоченных коллекций
# И реализуется, в основном, или
#
#    - встроенным методом списков sort()
#  или
#    - функцией sorted()
#
# для всех остальных типов коллекций

# имеется упорядоченный список
# встроенный метод sort
a = [1,-45,3,2,100,-4]                # этот объект имеет встроенный метод sort
a.sort()
print("метод sort - расставляет элементы по возрастанию: ", a) # список будет преобразован и отсортирован по возрастанию значений 


# Функция sorted()
# коллекции кортежи или строки - не имеют встроенного метода sort
b = ("ab", "bc", "wd", "gf")
# b.sort()                            # error
bsort = sorted(b)                     # в переменной сохранили результат сортировки 
c = "hello world"
# c.sort()                            # error
csort = sorted(c)                     # в переменной сохранили результат сортировки  

# На выходе получаем список а не кортеж
# Функция sorted создает новый список элементов кортежа и возвращает его
# кортеж остается без изменений
print("Получим упорядоченный список отсортир. эл-тов - Функция sorted() : ", bsort)
print("Получим упорядоченный список отсортир. эл-тов - Функция sorted() : ", csort)

# Можем сортировать только однотипные элементы
# или только числа, или только строки, или только кортежи
# a1 = [1,-45,3,2,100,-4, "b"]
# sorted(a1)                          # error - строки не могут сравниваться с числами

a1 = [1,-45,3,2,100,-4]
sorted(a1)                            # функция sorted() - не меняет наш список
a1.sort()                             # метод sort() - меняет наш список

# Разница в том, что
#
#    - встроенный метод sort() - меняет наш список
#  а
#    - функция sorted()        - не меняет наш список
#

# Необязательный параметр reverse - встроенного метода sort() и функции sorted()
# reverse = True/False
# False - сортировка по возрастанию значений
# True - по убыванию значений
a2 = [1,-45,3,2,100,-4]

a2 = sorted(a2, reverse = True)       # функция sorted()
print("Сортировка списка по убыванию значений reverse = True - ф-ция sorted(): ", a2)

a2.sort(reverse = False)
print("Сортировка списка по возрастанию значений reverse = False - метод sort(): ", a2)


# Создадим свои сортирующие функции для более точной настройки алгоритма сортировки
# Имеется список
a3 = [1,4,3,6,5,2]
# Cоздадим вспомогательную функцию
# чтобы вначале стояли четные элементы, а в конце – нечетные
# укажем функцию при сортировке нашего списка

# 1, 4, 3, 6, 5, 2
# 1  0  1  0  1  0
# для нечетных значений возвращает значение 1
# для четных значений возвращает значение 0
# ф-ция sorted() - сортировала значения по возрастанию
# сначала минимальные значения 0 в порядке их следования, затем макс. значения 1 в порядке их следования
def funcSort(x):
    return x%2
print( "\nСортировка списка сортирующей ф-цией: ", sorted(a3, key = funcSort) )
#                                                            именнованому параметру key присваиваем ссылку на ф-цию funcSort

# Модифицируем нашу ф-цию, чтоб выполнялась сортировка самих значений
# Четные и нечетные значения выстраиваются по возрастанию 
a4 = [1,4,3,6,5,2]
def funSort(x):
    if x%2 == 0:                        # если x делится нацело на 2, является четным
        return x                        # будем возвращать это четное значение x
    else:
        return x + 100                  # иначе к нечетному значению x добавим значение 100
    
print( "Сортировка списка четных и нечетных значений по возрастанию: ", sorted(a4, key = funSort) )

# 1,   4, 3,   6, 5,   2
# 101  4  103  6  105  2                # сортировка по ключам
# функция funSort возвращала след. значения:
# для четного такие же значения, какие принимали
# для нечетных значений возвращает значение увеличенное на 100
# все эти числа можно воспринимать как ключи по которым происходит сортировка элементов списка
# В Python называют сортировка по ключам

# Сортировка в виде анонимной функции lambda
a5 = [1,4,3,6,5,2]
print( "Сортировка списка четных и нечетных значений по возрастанию - lambda: ", sorted(a5, key = lambda x: x%2) )
# Прописывается ключевое слово lambda, ставится один обязательный аргумент x, далее говорим что будем с ним делать

# Сортировка со строками - по длине строки
lst = ["Москва", "Тверь", "Смоленск", "Псков", "Рязань"]
print( "Сортировка строк по длине строки: ", sorted(lst, key = len) )

# Сортировка по последнему символу строки или по первому символу
print( "Сортировка по длине строки - lambda - последний символ: ", sorted(lst, key = lambda x: x[-1]) )
print( "Сортировка по длине строки - lambda - первый символ: ", sorted(lst, key = lambda x: x[0]) )

# Сортировка сложных структур данных
# Имеется список из книг - необходимо отсортировать его по возрастанию цены 
books = {
("Евгений Онегин", "Пушкин А.С.", 200),
("Муму", "Тургенев И.С.", 250),
("Мастер и Маргарита", "Булгаков М.А.", 500),
("Мертвые души", "Гоголь Н.В.", 190)
}

print("Сортировка по третьему элементу коллекции - lambda: ", sorted(books, key = lambda x: x[2]) )
# вызовем метод sorted, укажем коллекцию которую сортируем,
# анонимную ф-цию которая будет возвращать третий элемент - по этим значениям
# будет происходить сортировка коллекции


