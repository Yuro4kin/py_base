# Упорядоченный список = []
#  например: список городов, число выигранных очков в серии игр, или значения некоторой функции
#  каждому элементу соответствует свой порядковый индекс, начиная с нулевого

lst = ["Москва", "Санкт-Петербург", "Тверь", "Казань"]
lst1 = lst
lst2 = type(lst)    # lst - ссылается на список в целом, говорит что это список
lst3 = lst[0]       # указываем список элементов, куда хотим обратиться
lst4 = lst[2]
# lst5 = lst[5]       # Error - IndexError: list index out of range
                      # индекс списка вышел за пределы диапазона

lst5 = len(lst)       # len - функция возвращает число элементов списка (0, 1, 2, 3) - 4 элемента
lst6 = len(lst)-1     # len(lst)-1  последний индекс который мы видим у нас в консоли - 4 
lst7 = lst[len(lst)-1]# len(lst)-1  последний индекс который мы видим у нас в консоли - "Казань"
lst8 = lst[-1]        # первый элемент с конца
lst9 = lst[-2]        # второй элемент с конца
                      # индексы могут быть положительными и отрицательными

# Перебор всех элементов последовательно, с помощью оператора цикла
# подходит цикл for
# перебираем последовательно все элементы списка
for city in lst:    
    # print(city)         # выводит список столбиком
    # или
    print (lst)       # распечатаем список в строку

lst10 = ["USA", "Spain", "Ukraine", "Canada"]
for country in lst10:    
    # print(lst10)       # выводит список столбиком
    # или
    print (country, type(country))     # выводит список страны и тип элемента этого списка
    # type(country)                       # выводит тип элемента - str  

# Изменим значение соответствующего элемента
lst11 = ["Alabama", "Alaska", "Florida", "Hawaii"]
for states in lst11:    
    # print(country)       # выводит список столбиком
    # или
    print (states, type(states))     # выводит список страны и тип элемента этого списка
    states = "Новое значение"          # ССЫЛКА ССЫЛАЕТСЯ НА ДРУГОЙ ОБЪЕКТ
    print(lst11)

# Типы данных: изменяемые и неизменяемые.
# Неизменяемые: числа, булевые значения, строки
# изменяемые: list - можем изменить его состояние, не создавая нового объекта
# Cписок[индекс] = значение

lst11[0] = "Massachusetts"      # Изменили состояние первого элемента с "Alabama" на "Massachusetts""
                                # Oбъект "Alabama" был удален сборщиком мусора

# Изменим элементы списка внутри цикла for - изменим на их квадраты
digs = [-1, 0, 5, 3, 2]
print(digs)

for x in range(5):  # range(len(digs)):         # x будет пробегать значение от 0 до 4, функция range последовательность от 0 до 4 с шагом 1
    digs[x] **= 2   # digs[x] = digs[x]**2      # далее используем x как индекс списка digs => присваиваем новое значение - возводим в квадрат
print(digs)

# Список в 100...1000 элементов 
A = [0]*1000
lst12 = len(A)
# Вместо 0 укажем конкретную строку, продублируется строка
A = ["none"]*100
A = []              # A - будет пустым списком

# Занесем данные в список 100...1000 элементов
# Есть список состоящий из 0
# Пользователь с клавиатуры вводит N чисел N = 0
# Укажем переменную, куда будем вводить это значение x = 0
# Пока x >= 0 пользователь будет вводить числа
# Пользователь введет отрицательное число, цикл завершит свою работу
# Происм пользователя ввести целое число, и помещаем в список
# N += 1
# Как только он ввел какое-либо отрицательное число,
# считывание прекращается и мы вычисляем среднее арифметическое введенных значений.

digs1 = [0]*100            # ЗАДАВАТЬ
N = 0; x = 0
while x >= 0:
   x = int(input("Введите целое число: "))
   digs1[N] = x            # ИЗМЕНЯТЬ
   if x >= 0: N += 1       # Число должно соответствовать числу введенных чисел
                           # Если х > 0, то N нужно увеличить на 1 

S = 0                      # ИСПОЛЬЗОВАТЬ СПИСКИ В ПРОГРАММЕ
for x in range(N):         # Цикл по всем нашим введенным числам 
    S += digs1[x]          # Суммируем все наши числа
S = S/N;                   # Вычисляем среднее арифметическое

ans = "S = %f, N = %d"%(S, N)
print (ans)   # Выводим среднее арифметическое и количество введенных чисел
print ("S = %f, N = %d"%(S, N))

# Список может состоять из произвольных данных (строка, число, булевое значение, произвольный список)
t = ["строка", 5, 5.7, True, [1,2,3]]
lenT = len(t)               # длина списка, список принимается как единый элемент
print(t)
print("Длина списка, список принимается как единый элемент: ", lenT)

# Двумерные списки - матрица состоящая из элементов 2 х 2
AA = [[1,2,3], [4,5,6], [7,8,9]]
print(AA)
# Обратимся к конкретному числу в матрице
           
lst13 = AA[1]           # Укажем список к которому обращаемся - обратились к среднему списку
print(lst13)
lst14 = AA[1][0]        # Возьмем у этого списка какой-нибудь индекс - можем перебирать элементы двумерного списка
print(lst14)
lst14 = AA[1][2] = -1   # Изменим значение 2-го элемента на -1 => выведем список в консоль
print(lst14)

# объединять списки, используя оператор +
# список слева добавим список справа
# списки могут состоять из разных элементов
lst15 = [1,2,3] + ["Alabama", "Alaska", "Florida", "Hawaii"]
print(lst15)
           
# Добавление в начало и конец списка новых элементов
digs2 = [1,2,3,4]
digs2 = digs2 +[7]          # добавим элемент в конец списка, элемент записывается 
lst16 = digs2
# или
digs2 += [8]                # добавим элемент в конец списка, элемент записывается
lst17 = digs2

lst18 = ["число"] + digs2   # добавим элемент в начало списка, первый элемент строка

# ERROR - объединять список с числом digs2 = digs2 +7

# Оператор in - проверка в списке элемента - True или False
lst19 = 3 in digs2
# Проверка элемента[1,2,3] в списке lst15
lst20 = [1,2,3] in lst15    # не находит элемент в списке при операторе + (- получим False)
lst21 = [1,2,3] in AA       # находит элемент в списке - True
print(lst20, lst21)         # если запишем часть в списке [1,2] - получим False
                            

# Функции max min - находят минимальные или максимальные числовые значение
# Только для ЧИСЕЛ и СТРОК, строки с числом сравнивать нельзя

calc1 = max(digs2)          # max добавленный элемент 8, после записи в список
calc2 = min(digs2)
print(calc1, calc2)

# Функция sum - суммируют наши элементы
calcSum =sum(digs2)         # sum элементов, после записи в список
print(calcSum)

# Сортировка списка
# sorted(d) - по возрастанию
# sorted(d, reverse=True) - по убыванию

lst22 = [-1, 0, 5, 3, 2, 5]
sort1 = sorted(lst22)
sort2 = sorted(lst22, reverse=True)
print(lst22, sort1, sort2)

# Сравнение списков между собой - по принципу сравнения строк,
# перебираются последовательно элементы, разные находятся и сравниваются
lst23 = [1,2,3] ==  [1,2,3]     # True
lst24 = [1,2,3] !=  [1,2,3]     # False
lst25 = [1,2,3] >   [1,2,3]     # False
lst26 = [10,2,3] >  [1,2,3]     # True
lst27 = [1,2,3]  >  [1,20,3]    # False
lst28 = [10,2,3]  > [1,20,30]   # True
lst29 = [10,2,3]  > [1,20,3]    # True 

# Сравнение списков между собой - однотипный тип
lst30 = [1,2, "abc"] > [1,2, "abc"]    # False
# lst31 = [1,2,3] > [1,2, "abc"]       # Error - число сравнивается с строкой
print(lst30)






## c_o_n_s_o_l_e ##

#  ['Москва', 'Санкт-Петербург', 'Тверь', 'Казань']
#  ['Москва', 'Санкт-Петербург', 'Тверь', 'Казань']
#  ['Москва', 'Санкт-Петербург', 'Тверь', 'Казань']
#  ['Москва', 'Санкт-Петербург', 'Тверь', 'Казань']
#  USA <class 'str'>
#  Spain <class 'str'>
#  Ukraine <class 'str'>
#  Canada <class 'str'>
#  Alabama <class 'str'>
#  ['Alabama', 'Alaska', 'Florida', 'Hawaii']
#  Alaska <class 'str'>
#  ['Alabama', 'Alaska', 'Florida', 'Hawaii']
#  Florida <class 'str'>
#  ['Alabama', 'Alaska', 'Florida', 'Hawaii']
#  Hawaii <class 'str'>
#  ['Alabama', 'Alaska', 'Florida', 'Hawaii']
#  [-1, 0, 5, 3, 2]
#  [1, 0, 25, 9, 4]
#  Введите целое число: 10
#  Введите целое число: 12
#  Введите целое число: 14
#  Введите целое число: 15
#  Введите целое число: 16
#  Введите целое число: -7
#  S = 13.400000, N = 5
#  S = 13.400000, N = 5
#  ['строка', 5, 5.7, True, [1, 2, 3]]
#  Длина списка, список принимается как единый элемент:  5
#  [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
#  [4, 5, 6]
#  4
#  -1
#  [1, 2, 3, 'Alabama', 'Alaska', 'Florida', 'Hawaii']
#  False True
#  8 1
#  25
#  [-1, 0, 5, 3, 2, 5] [-1, 0, 2, 3, 5, 5] [5, 5, 3, 2, 0, -1]
#  False


