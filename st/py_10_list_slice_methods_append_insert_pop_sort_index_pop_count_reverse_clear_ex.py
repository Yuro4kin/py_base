### Для списков применим механизм срезов, о котором мы уже говорили, рассматривая строки.
### Cписки - срезы и методы:
### Выделим элементы, начиная с индекса start и заканчивая,
### но не включая индекс end
### список[start:end] - начальный и конечный индекс
### Расскомментируй построчно

# lst = ["Москва", "Санкт-Петербург", "Тверь", "Казань"]
# lst1 = lst[1:3]         # 1-й элемент включается, 2-й включается, 3-й не включается
#                         # lst список остается без изменения
# lst2 = lst[-2:-1]       # Отсчет идет с конца
# lst3 = lst[0:-1]        # Выделили все элементы нашего списка, кроме последнего
# lst4 = lst[1:9999]      # ошибки не будет
# lst5 = lst[1:]          # возьмем все элементы до конца
# lst6 = lst[:3]          # исключили последний элемент
# print(lst1, lst2, lst3, lst4, lst5, lst6)




### Cоздадим КОПИЮ списка - [:] возвращает список целиком
### Расскомментируй построчно
# lst7 = lst[:]
# print(lst7)
# print(id(lst), id(lst7)) # разные значения id, которые говорят, что обе переменные ссылаются на разные списки




### Также копию списка, можно сделать с помощью функции-конструктора list()
### Расскомментируй построчно
# c = list(lst)
# print(c)
# print(id(lst), id(c))    # разные значения id, которые говорят, что обе переменные ссылаются на разные списки




### При замене в списке , исходный lst остается без изменений
### Совершенно получаем два разных списка
### Расскомментируй построчно
# c [1] = 1
# print(c, id(c))          # id не меняется при замене элемента, переменная "с" ссылается на тот же список


### В срезах можно указывать шаг следования (по умолчанию он равен 1).
### Для этого пишется еще одно двоеточие и указывается шаг.
### Срезы - шаг следования [::2]
### Расскомментируй построчно
# lst8 = lst[::2]
# print(lst8)


### Срезы - начальное значение - конечное значение - шаг следования
### Расскомментируй построчно
# lst9 = lst[1:4:2]
# print(lst9)



### Срезы - не указываем начальное значение - конечное значение - шаг следования
### Взяли первый элемент и дальше через три взяли последний
### Расскомментируй построчно
# lst10 = lst[:4:3]
# print(lst10)



### Срезы - указываем начальное значение - не указываем конечное значение - шаг следования
### Расскомментируй построчно
# lst11 = lst[1::2]
# print(lst11)




### Срезы - отрицательный индекс - перебор элементов будет в обратном порядке
### Расскомментируй построчно
# lst12 = lst[::-1]
# print(lst12)



### Список - это изменяемый объект, срезам присваиваем новое значение
### СБОРЩИК МУСОРА УДАЛЯЕТ ПРЕДЫДУЩИЕ ЭЛЕМЕНТЫ
### Расскомментируй построчно
# lst[1:3] = "Львов", "Винница"
# print(lst, id(lst))                # id не меняется при замене элемента, переменная "lst" ссылается на тот же список



### Срезы - вместо трех элементов по индексам 0,1,2 - записываются два элемента, сократили длину списка на 1
###  Большему срезу присвоим меньшее число элементов:
### Расскомментируй построчно
# lst[0:3] = 'Ужгород', 'Луцк'
# print(lst)


### Список - удаление элемента из списка по индексу
### Расскомментируй построчно
# del lst[1]
# print(lst)




### Метод .append() -добавляет в конец списка новое значение.
### Метод append ничего не возвращает, то есть, он меняет сам список благодаря тому, что он относится к изменяемому типу данных.
### Вызываем список для которого _вызывается метод_.имя метода(значение добавляемого эл-та).
### Расскомментируй построчно
# a = [1, -54, 3, 23, 43, -45, 0]
# a.append(100)
# print(a)
# #a = a.append(50)               # не надо писать НЕЛЬЗЯ - так мы только потеряем весь наш список!
# a1 = a.append(50)               # метод append ничего не возвращает в переменную a1, и присваивать значение None переменной a1 не имеет смысла
# print(a1)
# print(a)                        # для переменной a возвращает элемент 50


### Этим методы списков отличаются от методов строк, когда мы записывали


### Строки - .upper() - возвращает новую измененную строку
### Расскомментируй построчно
#string="Hello"
#string = string.upper()       # upper возвращает измененную строку
#print(string)


### Списки - изменяемый тип данных - .append()

### Списки - добавление строк - .append()
### Списки - добавление булевого значение - .append()
### Списки - добавление списка - .append()
### Расскомментируй построчно
# a.append("hello")
# print(a)
# a.append(True)
# print(a)
# a.append([1,2,3])
# print(a)



### Метод .append() - добавляет только один элемент
#a.append(4, 2)                  # Error - если захотим добавить элемент по индексу


### Метод .insert(3, 1000 ) - добавляет элемент по индексу
### Расскомментируй построчно
# a.insert(3, -1000)
# print(a)



### Метод .remove(True) - удаляет элемент по значению - 1 и True - одно и тоже
### Метод .remove(True) - удаляет первый найденный элемент 1, вызываем повторно удаляет True
### Метод .remove(True) -  находит первый подходящий элемент и удаляет его, остальные не трогает
### Расскомментируй построчно

# a.remove(True)            # True не удаляет, т.к. удален элемент 1,  ( 1 и True - одно и тоже)
# print(a)
# a.remove('hello')
# print(a)
# a.remove(-1000)
# print(a)
# a.remove(False)           # Удалил 0
# print(a)
# a.remove("buy")         # ValueError: list.remove(x): x not in list




### Метод .pop() - удаляет элемент по значению - возвращает удаленный элемент по значению
### .pop() - без аргумента удаляет последний элемент в списке
### .pop() - метод возвратит последний элемент, метод возвратит последнее значение этого элемента
### Расскомментируй построчно
# a.pop()
# print(a)


### Метод .pop() - можем сохранять удаленный элемент в какой-либо переменной, и при необходимости что-то с ним делать
### Расскомментируй построчно
# end = a.pop()            # сохранит удаленный элемент True в перемнной end
# print(a)
# print(end)


### Метод .pop() - удаление элемента по индексу
### Расскомментируй построчно
# end1 = a.pop(3)
# print(a)
# print(end1)


### Метод .clear() - удаление всего списка, получим пустой список
### Если нам нужно очистить весь список – удалить все элементы, то можно воспользоваться методом
### Расскомментируй построчно
#a.clear()
#print(a)                  # получим пустой список


### Метод .copy() - создает копию нашего списка
### Расскомментируй построчно
# b = a.copy()
# b[1] = 100
# print(id(a), id(b))        #  Переменные a и b ссылаются на разные списки
# print(b)


### Метод .count() - находит кол-во элементов с указанным значением
### Расскомментируй построчно
# b.append(3)                # добавили в конец списка элемент 3
# b.append(3)
# print(b)
# countB = b.count(3)        # нашли кол-во элементов с указанным значением
# print(countB)



### Метод .index() - находит  индекс 1-го элемента с определенным значением
### Расскомментируй построчно
# index_B = b.index(3)
# print(index_B)


### Метод .index() - start, находит  индекс элемента с какого будем искать с определенным значением
### Расскомментируй построчно
# index_b = b.index(23, 1)
# print(index_b)


### Метод .index() - находит  индекс элемента до которого будем искать с определенным значением
### Ищем число -45 с 1-го индекса и по 5-й не включая его. Если элемент не находится метод вернет ошибку
### Расскомментируй построчно
# index_bb = b.index(-45, 1, 5)
# print(index_bb)


### Срез - проверка существует ли элемент в данном срезе
### Расскомментируй построчно
# cheсkListB = 23 in b[1:7]
# print(cheсkListB)


### Метод .reverse() - меняет порядок записи элементов
### Расскомментируй построчно
# d = [1, -54, 23, 23, 43, -45, 0]
# print(d)


### Метод .sort() - сортировка списка по возрастанию
### Расскомментируй построчно
# d.sort()
# print(d)


# Метод .sort(reverse=True) - сортировка списка по убыванию
### Расскомментируй построчно
# d.sort(reverse=True)
# print(d)


# Метод .sort(reverse=True) - сортировка списка со строками
### Расскомментируй построчно
# lst15 = ["Москва", "Санкт-Петербург", "Тверь", "Казань"]
# lst15.sort()                  #  Лексикографическая сортировка
# print(lst15)



###  Основные методы списков
###  Методы         Описание
###  append()       Добавляет элемент в конец списка
###  insert()       Вставляет элемент в указанное место списка
###  remove()       Удаляет элемент по значению
###  pop()          Удаляет последний элемент, либо элемент с указанным индексом
###  clear()        Очищает список (удаляет все элементы)
###  copy()         Возвращает копию списка
###  count()        Возвращает число элементов с указанным значением
###  index()        Возвращает индекс первого найденного элемента
###  reverse()      Меняет порядок следования элементов на обратный
###  sort()         Сортирует элементы списка
